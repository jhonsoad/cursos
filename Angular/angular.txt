TS é componente
HTML é template
data binding vincular dados
unidirecional ("one-way data binding")ex: Interpolation ({{}}): Usado para renderizar o valor de uma expressão em um template. Por exemplo: <p>{{ meuValor }}</p>.

Binding de propriedade ([property]="value"): Permite vincular o valor de uma propriedade do componente a um atributo ou propriedade de um elemento HTML. Por exemplo: <input [value]="meuValor">.

Binding de evento ((event)="handler()"): Permite vincular um evento do elemento HTML a um método no componente. Por exemplo: <button (click)="onClick()">.

bidirecional ("two-way data binding") ex: ([(ngModel)]="value"): Combinação de binding de propriedade e binding de evento, permitindo que os dados fluam em ambas as direções entre o componente e o template. É frequentemente usado em elementos de formulário, como <input> e <select>.

Rotas
a criar o projeto é perguntado se queremos gerar o arquivo de rotas se for criado o nome dele é app-routing.module.ts, na const routes do tipo Routes que recebe um array "const routes: Routes = []" pra cada pagina que eu quiser acessar eu defino o path e o componente que quero atrelar ao path {path:'meuComponete',componente: meuComponente} nesse caso ao acessar o projeto e o complemento do path acessamos o componente ex: localhost:4200/meuComponente tambem temos que usar o seletor <app-routing></app-routing> para chamar esses componentes no app-component
podemos criar um path com valor '' para ser o acesso padrao sem ter o /complemento, e para usar isso nos precisamos colocar a propriedade {path:'', redirectTo:'meuComponente', pathMatch: 'full'} para que o acesso a url sem o complementoredirecione para algum componente, e para chamar esse componentes adicionamos em um elemento html como um <button> a propriedade routerLink='meuComponete' com o valor de um path criado, em menus de navegacao podemos aplicar uma classe css ao link ativo atualmente com routerLinkActive="classe-ativa" coloque essa propriedade e a classe que que adicionar

diretiva *ngFor="let minhaVariavelDeclaradaAqui of meuArrayDeclaradoNoTs" com isso ele vai fazer um for criando os elementos html na quantidade do array

diretiva *ngIf="listaPensamentos.lenght > 0, else semPensamento" usamos a condição a ser verificada pode ser verdadeira ou falsa nesse caso verifica o tamanho de um array se ele for maior que 0 mostra o conteudo que esta nos elementos filhos de ode essa diretiva está, depois da virgula definimos o else passando um template a ser renderizado identificado por uma referencia local nesse caso o semPensamneto <ng-tempate #semPensamento></ng-tempate>

diretiva <div [ngClass]="{'classe-1': condição1, 'classe-2': condição2, ...}"></div> é usada para adicionar classes css em elementos html com base em condições especificas entre seu parenteses podemos colocar tambem "['class1', 'class2', dynamicClass]" array de classes e "getDynamicClasses()" chamar um metodo que retorna uma string o nome da classe css

Decorator @Input permite que uma propriedade em seu componente recebe dados do componete pai que esta chamando esse componente com o seletor ex: no componete tem a propriedade @Input childValue: string; quando chamo o componente que tem essa propriedade em outro componente <app-child [childValue]="parentData"></app-child> eu passo essa propriedade que tem o @Input entre conchetes na chamada do componente e atrelo o valor dela com uma variavel do componente pai que nesse caso é a parentData.

Para testar retorno de uma api rest podemos usar o json-server, precisamos criar uma interface com o formato do reponse que vira do backend para padronizar o formato, então a variavel que ira receber os dados desse response dev ser do tipo da interface criada

Services as services criadas vem com o decorstor @Injectable({providedIn: 'root'}) esse decorator é usado em classes para indicar que essa classe pode ser usada com dependências indicando que essa classe pode ser usada como serviço que possui uma responsabilidade especifica e pode ser injetada em outros componentes, servicos ou modulos para fornecer funcionalidades reutilizaveis.
A injeção de depêndencia é um padrão de design onde as dependências de uma classe são fornecidas externamente em vez de serem criadas dentro da própria classe, com a opção providedIn: 'root' dentro do injectable indica que o servico pode ser injetado em qualquer lugar da aplicação sem essa opção seria necessário fazer a configuração manual da injeção de dependencia em um modulo no array providers, a injeção de dependencia é feita via contructor ex:
import { HttpClient } from '@angular/common/http'; 
  constructor(private http: HttpClient) { }
dessa forma o httpClient é injetado na minha service sem ele precisaria criar uma intancia do httpClient e passar as configs fazendo que outra instancia seja criada perderia a testabilidade e a modularidade do código criando a instancia em varios locais
const httpClient = new HttpClient(/* opções */);
