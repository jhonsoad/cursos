Criar projeto angular com ng new nome --create-application=false para criar um workspace que sera a casca dos projetos app mfe

Cria aplicação angular com comando ng g application nomeApp para criar aplicacao dentro do workspace criado com new, a aplicacao criada ira para pasta projects do projeto casca, criei um mfe-app e um mfe-host dentro do workspace, para rodar um projeto app rodar o comando ng s nomeDoProjetoApp

Instalar webpack nos projetos app comando npm i webpack-cli --save-dev --project=nomeProjeto

Adicionar arquivo webpack para uma aplicacao, comando ng add @angular-architects/module-federation --project=nomeApp --port 4201 nome do projeto e a porta em que vai rodar, se o projeto casca for de uma versao diferente do projeto que esta sendo colocado como mfe execute esse comando e depois desinstale o ngx-build-plus e instale o da versao do angular do projeto ex: npm remove ngx-build-plus depois npm install ngx-build-plus@14 --save-dev para usar a versao 14

Criar um modulo chamado profile para ser exposto no mfe-app comando ng g module profile --project=mfe-app

Configurar modulo profile em imports colocar
 [ CommonModule, BrowserModule, RouterModule.forChild([{ path: '', component: ProfileComponent }]) ] colocando a rota defaut para o componente que quero chamar

Criar componente no mfe-app ja vai usar o modulo criado com esse comando ficara na mesma pasta a profile ng g c profile --project=mfe-app

Configurar aquivo webpack.config.js do projeto mfe-app descomentar parte de exemplo 'for remotes' para ficar assim:
name: "mfeApp",
filename: "remoteEntry.js",
exposes: {
	'./ProfileModule': './projects/mfe-app/src/app/profile/profile.module.ts',
},
com o caminho e nome exportado do modulo, 'ProfileModule' esse vai ser um nome unico no host app para exibir esse modulo

Adicionar scriptType: "text/javascript" ao output
output: {
	uniqueName: "mfeApp",
	publicPath: "auto",
	scriptType: 'text/javascript'
},
apaga o library: { type: "module" },

Configurar rotas com o componente criado

Configurar modulo criado no app.module adicionando ao imports

Ao rodar o projeto na porta 4300 consigo acessar o javascript exposto em localhost:4300/remoteEntry.js

Configurar webpack do mfe-host descomentar parte de exemplo 'For hosts'
remotes: {
	"mfeApp": "http://localhost:4300/remoteEntry.js",
},
passar nome unico no caso mfeApp, e depois passar a url com o javascript exposto

Colocar no output o scriptType: "text/javascript"
apaga o library: { type: "module" },

Cria componente home no host-app

Configura rota desse componente path '', component: HomeComponent

Criar botão no app.component do host para acessar a home do mfe-host e para acessar o profile do mfe-app com outlet

Configura a rota no mfe-host
{ path: 'profile', loadChildren: () => 
loadRemoteModule({
  remoteEntry: 'http://localhost:4300/remoteEntry.js', // URL do mfe app
  remoteName: 'mfeApp', // nome do mfe app
  exposedModule: './ProfileModule' // nome do mfe module que foi exposto
}).then((m) => m.ProfileModule).catch(err => console.error('Error loading remote module', err))
}

Para expor um component no mfe-app em webpack.config.js em exposes colocar './ProfileComponent': './projects/mfe-app/src/app/profile/profile.component.ts',

Para consumir esse componente no mfe-host em um component no host ex: home no ts criar um viewclild
para acessar uma um <div #mfeComponent></div> vazio criado no html
 @ViewChild('mfeComponent', { read: ViewContainerRef }) mfeComponent!: ViewContainerRef; // busca a referencia no html e guarda na propriedade mfeComponent
 
async loadComponent() {
try {
	const module = await loadRemoteModule({
		remoteEntry: 'http://localhost:4300/remoteEntry.js',  
		remoteName: 'mfeApp',  
		exposedModule: './ProfileComponent' 
	}); // carrega um component exposto pro um mfe e guarda em uma variavel

	console.log('Módulo carregado:', module);

	const componentRef = this.mfeComponent.createComponent(module.ProfileComponent); //cria e insere o componente no contêiner

	console.log('Componente remoto criado:', componentRef);
} catch (err) {
	console.error('Erro ao carregar o componente remoto:', err);
}
}
